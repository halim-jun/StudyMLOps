name: Train and Test
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Poetry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install pipx
          pipx install poetry

      - name: Install dependencies (Poetry with dev, no project install)
        run: |
          poetry --version
          poetry install --no-root --with dev

      #- name: Run linting
      #  run: |
      #    poetry run flake8 project/ --max-line-length=100
      #    poetry run pylint project/ --fail-under=7.0

      - name: Run tests
        run: |
          poetry run pytest project/tests -v

      - name: Run training
        run: |
          poetry run python project/src/training.py
      
      - name: Run tests
        run: |
          poetry run pytest project/tests -v
      - name : Run FastAPI
        run: |
          poetry run uvicorn project.src.main:app --reload
          curl -X POST "http://127.0.0.1:8000/predict" \
               -H "Content-Type: application/json" \
               -d '{
                 "Stage_fear_bool": true,
                 "Drained_after_socializing_bool": true,
                 "Time_spent_Alone": 0,
                 "Social_event_attendance": 0,
                 "Going_outside": 0,
                 "Friends_circle_size": 0,
                 "Post_frequency": 0
               }'

